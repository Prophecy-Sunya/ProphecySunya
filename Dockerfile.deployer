FROM node:20-alpine AS builder
WORKDIR /app
# Install dependencies for building
RUN apk add --no-cache python3 make g++ git bash curl
# Install Scarb for Cairo contracts
ENV SCARB_VERSION=2.4.0
RUN mkdir -p /tmp/scarb && \
    cd /tmp/scarb && \
    curl -L https://github.com/software-mansion/scarb/releases/download/v${SCARB_VERSION}/scarb-v${SCARB_VERSION}-x86_64-unknown-linux-musl.tar.gz -o scarb.tar.gz && \
    tar -xzf scarb.tar.gz && \
    mv scarb-v${SCARB_VERSION}-x86_64-unknown-linux-musl /usr/local/scarb && \
    ln -s /usr/local/scarb/bin/scarb /usr/local/bin/scarb && \
    rm -rf /tmp/scarb
# Copy Cairo contracts and Scarb.toml for building
COPY contracts/ /app/contracts/
COPY src/ /app/src/
COPY Scarb.toml /app/
# Build Cairo contracts
RUN scarb --version && scarb build
# Debug: List all generated artifacts (with || true to prevent build failure if no files found)
RUN find /app -name "*.json" | grep -i contract || true

# Create a new stage for deployment
FROM node:20-alpine
WORKDIR /app
# Copy the built artifacts from the builder stage
COPY --from=builder /app/target /app/target
# Copy package files for deployment scripts
COPY scripts/package.json scripts/tsconfig.json /app/scripts/
# Install script dependencies
WORKDIR /app/scripts
RUN npm install
# Copy the deployment script - MOVED TO END TO PREVENT CACHE ISSUES
WORKDIR /app
# Debug: List target directory contents before running deployment
CMD ["sh", "-c", "echo 'Target directory contents:' && ls -la /app/target && find /app/target -type f -name '*.json' && cd /app/scripts && npm run deploy"]

# IMPORTANT: Copy the deployment script at the very end to ensure the latest version is used
# This prevents Docker cache issues from using an old version of the script
COPY scripts/deploy.ts /app/scripts/
